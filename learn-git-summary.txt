
==Git Bash commands

  pwd
  cd ..
  cd ~
  cd /directory-of-choice/...

  ls
  ls -l
  ls -la

Tip: type first character of file or directory name and click tab to auto-complete


==Check possible existing Git configuration

  where git

  git version

  git update

  git config --list

  git status [tip: use this all the time !!]

  git log


==Git configuration

  git config --global user.name "username"
  git config --global user.email "email"
  
Make sure that the config file contains the user.name and user.email of the GitHub-account you will be pushing your files to


==Change default name of "master" branch to "main"

Git uses "master" as name for the main branch while GitHub uses "main"

Change the Git name of the "master" to "main" to avoid problems when you push your files to GitHub

  git branch -M main

Do this in every new repository

OR:

Change this once after a new Git install:

  git config --global init.defaultBranch main


==Git create new repository from CLI

  git init [creates a .git hidden folder in your directory]

  git branch -M main

  git remote add origin https://github.com.../your-repository.git

  git push -u origin main

It's possible to encounter an error message: "fatal: remote origin already exists".  Solution:

  git remote -v [to check the url of the remote origin]

  git remote remove origin


==Git workflow

By default you work in the main branch

--Staging
After you change something in your Git folder:

  git add filename.html
  git add *.html [adds all .html files in directory]
  git add . [adds all files in directory]

To undo the staging:

  git reset [unstages everything]
  git reset filename [unstages a specific file]

--Commiting
With this command you create the actual "save point"

  git commit -m "your-text"

The commit text completes the phrase: "If applied, this commit will..."

Optional: in the body of the commit message, explain "why" you made the change, not "how"


==Git branch workflow

  git branch [lists local branches]
  git branch -a [list local and remote branches]

  git branch "your-branch"
  git checkout "your-branch"

OR:

  git checkout -b your-branch [creates the branch and changes to it]

  git push --set-upstream origin update [first push to GitHub]
  
  git push [all pushes after first push]


==Git delete branch

  git branch -d "your-branch" [only deletes local on Git]
  git push origin :your-branch [deletes remote on GitHub]


==Git merge branch
From the "feature branch"

  git merge main

Go to the "main branch"

  git merge feature-branch


==Git pull request


==Git delete staged file

  git restore --staged filename


==Open a file from Git Bash CL

  notepad filename.txt [opens the file in Notepad]


==Tags

  git tag tagname [adds a tag to a branch]

  git push origin --tags [pushes the tag to the remote repository]


==Exclude files from push

Create a .gitignore file


==Git clone
To download a repo from GitHub to your local machine


==Git pull
To download a change made on GitHub to an existing repo on your local machine

  git pull --all


==Add/Complete if necessary
To let others better understand your repo

--Description
--README
--Contributing guideline
--Code of Conduct
--License


==PROBLEMS-SOLUTIONS

--Unable to pull a remote repo

----Situation:
1-created a local repo and 1file 'index.html'
2-created a remote repo of the same name and added a README and LICENSE

----Problem: error on Git "fatal: refusing to merge unrelated histories"

----Solution:

  git pull remotename main --allow-unrelated-histores


==Sources

All free at time of writing

--https://www.youtube.com/watch?v=9R31OUPpxU4
--https://www.youtube.com/watch?v=bFCM-PC3cu8


==Resources

> https://www.makeareadme.com/
> https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-license-to-a-repository
> https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project
> https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/setting-guidelines-for-repository-contributors?WT.mc_id=academic-77807-sagibbon
> https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-readmes?WT.mc_id=academic-77807-sagibbon







